; ModuleID = 'MiniC compiler'
source_filename = "MiniC compiler"

@A = global [10000 x i8] zeroinitializer
@cnt = global i32 0
@ptr = global i32 0
@0 = private unnamed_addr constant [6 x i8] c"a.txt\00"

define i32 @main() {
entry:
  %match = alloca i32
  %j = alloca i32
  %found = alloca i32
  %i = alloca i32
  %m = alloca i32
  %l = alloca i32
  %idx = alloca i32
  %c = alloca i8
  %EOF = alloca i8
  store i8 0, i8* %EOF
  store i32 0, i32* @cnt
  store i32 0, i32* %idx
  store i32 0, i32* @ptr
  store i32 0, i32* %l
  br label %loop_cond

loop_cond:                                        ; preds = %end_assn4, %entry
  %0 = load i32, i32* %l
  %ltcompare = icmp slt i32 %0, 100
  br i1 %ltcompare, label %loop, label %after6

loop:                                             ; preds = %loop_cond
  store i32 0, i32* %m
  br label %loop_cond1

loop_cond1:                                       ; preds = %end_assn, %loop
  %1 = load i32, i32* %m
  %ltcompare2 = icmp slt i32 %1, 100
  br i1 %ltcompare2, label %loop3, label %after

loop3:                                            ; preds = %loop_cond1
  %2 = load i32, i32* %l
  %3 = mul i32 %2, 100
  %4 = add i32 0, %3
  %5 = load i32, i32* %m
  %6 = add i32 %4, %5
  %A_Index = getelementptr [10000 x i8], [10000 x i8]* @A, i32 0, i32 %6
  store i8 0, i8* %A_Index
  br label %end_assn

end_assn:                                         ; preds = %loop3
  %7 = load i32, i32* %m
  %add = add i32 %7, 1
  store i32 %add, i32* %m
  br label %loop_cond1

after:                                            ; preds = %loop_cond1
  br label %end_assn4

end_assn4:                                        ; preds = %after
  %8 = load i32, i32* %l
  %add5 = add i32 %8, 1
  store i32 %add5, i32* %l
  br label %loop_cond

after6:                                           ; preds = %loop_cond
  br i1 true, label %loop7, label %after52

loop7:                                            ; preds = %end_assn51, %after6
  %9 = load i32, i32* %idx
  %10 = call i8 @fileGetChar(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @0, i32 0, i32 0), i32 %9)
  store i8 %10, i8* %c
  %11 = load i8, i8* %c
  %equalcompare = icmp eq i8 %11, 32
  %12 = load i8, i8* %c
  %equalcompare8 = icmp eq i8 %12, 10
  %13 = or i1 %equalcompare, %equalcompare8
  %14 = load i8, i8* %c
  %15 = load i8, i8* %EOF
  %equalcompare9 = icmp eq i8 %14, %15
  %16 = or i1 %13, %equalcompare9
  br i1 %16, label %if, label %else

if:                                               ; preds = %loop7
  store i32 0, i32* %found
  store i32 0, i32* %i
  br label %loop_cond10

loop_cond10:                                      ; preds = %end_assn35, %if
  %17 = load i32, i32* %i
  %18 = load i32, i32* @cnt
  %ltcompare11 = icmp slt i32 %17, %18
  br i1 %ltcompare11, label %loop12, label %after37

loop12:                                           ; preds = %loop_cond10
  store i32 0, i32* %match
  store i32 0, i32* %j
  br label %loop_cond13

loop_cond13:                                      ; preds = %end_assn28, %loop12
  br i1 true, label %loop14, label %after30

loop14:                                           ; preds = %loop_cond13
  %19 = load i32, i32* %i
  %20 = mul i32 %19, 100
  %21 = add i32 0, %20
  %22 = load i32, i32* %j
  %23 = add i32 %21, %22
  %A_Index15 = getelementptr [10000 x i8], [10000 x i8]* @A, i32 0, i32 %23
  %24 = load i8, i8* %A_Index15
  %25 = load i32, i32* @cnt
  %26 = mul i32 %25, 100
  %27 = add i32 0, %26
  %28 = load i32, i32* %j
  %29 = add i32 %27, %28
  %A_Index16 = getelementptr [10000 x i8], [10000 x i8]* @A, i32 0, i32 %29
  %30 = load i8, i8* %A_Index16
  %equalcompare17 = icmp eq i8 %24, %30
  %31 = load i32, i32* %i
  %32 = mul i32 %31, 100
  %33 = add i32 0, %32
  %34 = load i32, i32* %j
  %35 = add i32 %33, %34
  %A_Index18 = getelementptr [10000 x i8], [10000 x i8]* @A, i32 0, i32 %35
  %36 = load i8, i8* %A_Index18
  %equalcompare19 = icmp eq i8 %36, 0
  %37 = and i1 %equalcompare17, %equalcompare19
  br i1 %37, label %if20, label %ifcont

if20:                                             ; preds = %loop14
  store i32 1, i32* %match
  br label %break

break:                                            ; preds = %if20
  br label %after30

after_break:                                      ; No predecessors!
  br label %ifcont

ifcont:                                           ; preds = %after_break, %loop14
  %38 = load i32, i32* %i
  %39 = mul i32 %38, 100
  %40 = add i32 0, %39
  %41 = load i32, i32* %j
  %42 = add i32 %40, %41
  %A_Index21 = getelementptr [10000 x i8], [10000 x i8]* @A, i32 0, i32 %42
  %43 = load i8, i8* %A_Index21
  %44 = load i32, i32* @cnt
  %45 = mul i32 %44, 100
  %46 = add i32 0, %45
  %47 = load i32, i32* %j
  %48 = add i32 %46, %47
  %A_Index22 = getelementptr [10000 x i8], [10000 x i8]* @A, i32 0, i32 %48
  %49 = load i8, i8* %A_Index22
  %equalcompare23 = icmp eq i8 %43, %49
  br i1 %equalcompare23, label %if24, label %ifcont25

if24:                                             ; preds = %ifcont
  br label %continue

continue:                                         ; preds = %if24
  br label %end_assn28

after_continue:                                   ; No predecessors!
  br label %ifcont25

ifcont25:                                         ; preds = %after_continue, %ifcont
  br label %break26

break26:                                          ; preds = %ifcont25
  br label %after30

after_break27:                                    ; No predecessors!
  br label %end_assn28

end_assn28:                                       ; preds = %after_break27, %continue
  %50 = load i32, i32* %j
  %add29 = add i32 %50, 1
  store i32 %add29, i32* %j
  br label %loop_cond13

after30:                                          ; preds = %break26, %break, %loop_cond13
  %51 = load i32, i32* %match
  %ifcond = icmp ne i32 %51, 0
  br i1 %ifcond, label %if31, label %ifcont34

if31:                                             ; preds = %after30
  store i32 1, i32* %found
  br label %break32

break32:                                          ; preds = %if31
  br label %after37

after_break33:                                    ; No predecessors!
  br label %ifcont34

ifcont34:                                         ; preds = %after_break33, %after30
  br label %end_assn35

end_assn35:                                       ; preds = %ifcont34
  %52 = load i32, i32* %i
  %add36 = add i32 %52, 1
  store i32 %add36, i32* %i
  br label %loop_cond10

after37:                                          ; preds = %break32, %loop_cond10
  %53 = load i32, i32* %found
  %equalcompare38 = icmp eq i32 %53, 0
  br i1 %equalcompare38, label %if39, label %ifcont41

if39:                                             ; preds = %after37
  %54 = load i32, i32* @cnt
  %add40 = add i32 %54, 1
  store i32 %add40, i32* @cnt
  br label %ifcont41

ifcont41:                                         ; preds = %if39, %after37
  store i32 0, i32* @ptr
  %55 = load i8, i8* %c
  %56 = load i8, i8* %EOF
  %equalcompare42 = icmp eq i8 %55, %56
  br i1 %equalcompare42, label %if43, label %ifcont46

if43:                                             ; preds = %ifcont41
  br label %break44

break44:                                          ; preds = %if43
  br label %after52

after_break45:                                    ; No predecessors!
  br label %ifcont46

ifcont46:                                         ; preds = %after_break45, %ifcont41
  br label %ifcont49

else:                                             ; preds = %loop7
  %57 = load i32, i32* @cnt
  %58 = mul i32 %57, 100
  %59 = add i32 0, %58
  %60 = load i32, i32* @ptr
  %61 = add i32 %59, %60
  %A_Index47 = getelementptr [10000 x i8], [10000 x i8]* @A, i32 0, i32 %61
  %62 = load i8, i8* %c
  store i8 %62, i8* %A_Index47
  %63 = load i32, i32* @ptr
  %add48 = add i32 %63, 1
  store i32 %add48, i32* @ptr
  br label %ifcont49

ifcont49:                                         ; preds = %else, %ifcont46
  %64 = load i32, i32* %idx
  %add50 = add i32 %64, 1
  store i32 %add50, i32* %idx
  br label %end_assn51

end_assn51:                                       ; preds = %ifcont49
  br i1 true, label %loop7, label %after52

after52:                                          ; preds = %end_assn51, %break44, %after6
  %65 = load i32, i32* @cnt
  call void @printlnint(i32 %65)
  br label %return

return:                                           ; preds = %after52
  ret i32 0
}

declare i8 @fileGetChar(i8*, i32)

declare void @printlnint(i32)
