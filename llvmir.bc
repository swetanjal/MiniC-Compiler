; ModuleID = 'MiniC compiler'
source_filename = "MiniC compiler"

@A = global [1000000 x i32] zeroinitializer
@tmp = global [1000000 x i32] zeroinitializer

define void @sort(i32 %l, i32 %r) {
entry:
  %c = alloca i32
  %r_ptr = alloca i32
  %l_ptr = alloca i32
  %mid = alloca i32
  %sz = alloca i32
  %i = alloca i32
  %r2 = alloca i32
  %l1 = alloca i32
  store i32 %l, i32* %l1
  store i32 %r, i32* %r2
  %0 = load i32, i32* %r2
  %1 = load i32, i32* %l1
  %sub = sub i32 %0, %1
  %add = add i32 %sub, 1
  store i32 %add, i32* %sz
  %2 = load i32, i32* %sz
  %equalcompare = icmp eq i32 %2, 1
  br i1 %equalcompare, label %if, label %ifcont

if:                                               ; preds = %entry
  br label %return

return:                                           ; preds = %if
  ret void

after_return:                                     ; No predecessors!
  br label %ifcont

ifcont:                                           ; preds = %after_return, %entry
  %3 = load i32, i32* %l1
  %4 = load i32, i32* %r2
  %add3 = add i32 %3, %4
  %div = sdiv i32 %add3, 2
  store i32 %div, i32* %mid
  %5 = load i32, i32* %l1
  %6 = load i32, i32* %mid
  call void @sort(i32 %5, i32 %6)
  %7 = load i32, i32* %mid
  %add4 = add i32 %7, 1
  %8 = load i32, i32* %r2
  call void @sort(i32 %add4, i32 %8)
  store i32 0, i32* %c
  %9 = load i32, i32* %l1
  store i32 %9, i32* %l_ptr
  %10 = load i32, i32* %mid
  %add5 = add i32 %10, 1
  store i32 %add5, i32* %r_ptr
  %11 = load i32, i32* %l_ptr
  %12 = load i32, i32* %mid
  %lecompare = icmp sle i32 %11, %12
  %13 = load i32, i32* %r_ptr
  %14 = load i32, i32* %r2
  %lecompare6 = icmp sle i32 %13, %14
  %15 = and i1 %lecompare, %lecompare6
  br i1 %15, label %loop, label %after

loop:                                             ; preds = %end_assn, %ifcont
  %16 = load i32, i32* %l_ptr
  %17 = add i32 0, %16
  %A_Index = getelementptr [1000000 x i32], [1000000 x i32]* @A, i32 0, i32 %17
  %18 = load i32, i32* %A_Index
  %19 = load i32, i32* %r_ptr
  %20 = add i32 0, %19
  %A_Index7 = getelementptr [1000000 x i32], [1000000 x i32]* @A, i32 0, i32 %20
  %21 = load i32, i32* %A_Index7
  %ltcompare = icmp slt i32 %18, %21
  br i1 %ltcompare, label %if8, label %else

if8:                                              ; preds = %loop
  %22 = load i32, i32* %c
  %23 = add i32 0, %22
  %tmp_Index = getelementptr [1000000 x i32], [1000000 x i32]* @tmp, i32 0, i32 %23
  %24 = load i32, i32* %l_ptr
  %25 = add i32 0, %24
  %A_Index9 = getelementptr [1000000 x i32], [1000000 x i32]* @A, i32 0, i32 %25
  %26 = load i32, i32* %A_Index9
  store i32 %26, i32* %tmp_Index
  %27 = load i32, i32* %c
  %add10 = add i32 %27, 1
  store i32 %add10, i32* %c
  %28 = load i32, i32* %l_ptr
  %add11 = add i32 %28, 1
  store i32 %add11, i32* %l_ptr
  br label %ifcont16

else:                                             ; preds = %loop
  %29 = load i32, i32* %c
  %30 = add i32 0, %29
  %tmp_Index12 = getelementptr [1000000 x i32], [1000000 x i32]* @tmp, i32 0, i32 %30
  %31 = load i32, i32* %r_ptr
  %32 = add i32 0, %31
  %A_Index13 = getelementptr [1000000 x i32], [1000000 x i32]* @A, i32 0, i32 %32
  %33 = load i32, i32* %A_Index13
  store i32 %33, i32* %tmp_Index12
  %34 = load i32, i32* %c
  %add14 = add i32 %34, 1
  store i32 %add14, i32* %c
  %35 = load i32, i32* %r_ptr
  %add15 = add i32 %35, 1
  store i32 %add15, i32* %r_ptr
  br label %ifcont16

ifcont16:                                         ; preds = %else, %if8
  br label %end_assn

end_assn:                                         ; preds = %ifcont16
  %36 = load i32, i32* %l_ptr
  %37 = load i32, i32* %mid
  %lecompare17 = icmp sle i32 %36, %37
  %38 = load i32, i32* %r_ptr
  %39 = load i32, i32* %r2
  %lecompare18 = icmp sle i32 %38, %39
  %40 = and i1 %lecompare17, %lecompare18
  br i1 %40, label %loop, label %after

after:                                            ; preds = %end_assn, %ifcont
  %41 = load i32, i32* %l_ptr
  %42 = load i32, i32* %mid
  %lecompare20 = icmp sle i32 %41, %42
  br i1 %lecompare20, label %loop19, label %after27

loop19:                                           ; preds = %end_assn25, %after
  %43 = load i32, i32* %c
  %44 = add i32 0, %43
  %tmp_Index21 = getelementptr [1000000 x i32], [1000000 x i32]* @tmp, i32 0, i32 %44
  %45 = load i32, i32* %l_ptr
  %46 = add i32 0, %45
  %A_Index22 = getelementptr [1000000 x i32], [1000000 x i32]* @A, i32 0, i32 %46
  %47 = load i32, i32* %A_Index22
  store i32 %47, i32* %tmp_Index21
  %48 = load i32, i32* %c
  %add23 = add i32 %48, 1
  store i32 %add23, i32* %c
  %49 = load i32, i32* %l_ptr
  %add24 = add i32 %49, 1
  store i32 %add24, i32* %l_ptr
  br label %end_assn25

end_assn25:                                       ; preds = %loop19
  %50 = load i32, i32* %l_ptr
  %51 = load i32, i32* %mid
  %lecompare26 = icmp sle i32 %50, %51
  br i1 %lecompare26, label %loop19, label %after27

after27:                                          ; preds = %end_assn25, %after
  %52 = load i32, i32* %r_ptr
  %53 = load i32, i32* %r2
  %lecompare29 = icmp sle i32 %52, %53
  br i1 %lecompare29, label %loop28, label %after36

loop28:                                           ; preds = %end_assn34, %after27
  %54 = load i32, i32* %c
  %55 = add i32 0, %54
  %tmp_Index30 = getelementptr [1000000 x i32], [1000000 x i32]* @tmp, i32 0, i32 %55
  %56 = load i32, i32* %r_ptr
  %57 = add i32 0, %56
  %A_Index31 = getelementptr [1000000 x i32], [1000000 x i32]* @A, i32 0, i32 %57
  %58 = load i32, i32* %A_Index31
  store i32 %58, i32* %tmp_Index30
  %59 = load i32, i32* %c
  %add32 = add i32 %59, 1
  store i32 %add32, i32* %c
  %60 = load i32, i32* %r_ptr
  %add33 = add i32 %60, 1
  store i32 %add33, i32* %r_ptr
  br label %end_assn34

end_assn34:                                       ; preds = %loop28
  %61 = load i32, i32* %r_ptr
  %62 = load i32, i32* %r2
  %lecompare35 = icmp sle i32 %61, %62
  br i1 %lecompare35, label %loop28, label %after36

after36:                                          ; preds = %end_assn34, %after27
  %63 = load i32, i32* %l1
  store i32 %63, i32* %i
  br label %loop_cond

loop_cond:                                        ; preds = %end_assn42, %after36
  %64 = load i32, i32* %i
  %65 = load i32, i32* %r2
  %lecompare37 = icmp sle i32 %64, %65
  br i1 %lecompare37, label %loop38, label %after44

loop38:                                           ; preds = %loop_cond
  %66 = load i32, i32* %i
  %67 = add i32 0, %66
  %A_Index39 = getelementptr [1000000 x i32], [1000000 x i32]* @A, i32 0, i32 %67
  %68 = load i32, i32* %i
  %69 = load i32, i32* %l1
  %sub40 = sub i32 %68, %69
  %70 = add i32 0, %sub40
  %tmp_Index41 = getelementptr [1000000 x i32], [1000000 x i32]* @tmp, i32 0, i32 %70
  %71 = load i32, i32* %tmp_Index41
  store i32 %71, i32* %A_Index39
  br label %end_assn42

end_assn42:                                       ; preds = %loop38
  %72 = load i32, i32* %i
  %add43 = add i32 %72, 1
  store i32 %add43, i32* %i
  br label %loop_cond

after44:                                          ; preds = %loop_cond
  ret void
}

define i32 @main() {
entry:
  %N = alloca i32
  %i = alloca i32
  %0 = call i32 @readint()
  store i32 %0, i32* %N
  store i32 0, i32* %i
  br label %loop_cond

loop_cond:                                        ; preds = %end_assn, %entry
  %1 = load i32, i32* %i
  %2 = load i32, i32* %N
  %ltcompare = icmp slt i32 %1, %2
  br i1 %ltcompare, label %loop, label %after

loop:                                             ; preds = %loop_cond
  %3 = load i32, i32* %i
  %4 = add i32 0, %3
  %A_Index = getelementptr [1000000 x i32], [1000000 x i32]* @A, i32 0, i32 %4
  %5 = call i32 @readint()
  store i32 %5, i32* %A_Index
  br label %end_assn

end_assn:                                         ; preds = %loop
  %6 = load i32, i32* %i
  %add = add i32 %6, 1
  store i32 %add, i32* %i
  br label %loop_cond

after:                                            ; preds = %loop_cond
  %7 = load i32, i32* %N
  %sub = sub i32 %7, 1
  call void @sort(i32 0, i32 %sub)
  store i32 0, i32* %i
  br label %loop_cond1

loop_cond1:                                       ; preds = %end_assn5, %after
  %8 = load i32, i32* %i
  %9 = load i32, i32* %N
  %ltcompare2 = icmp slt i32 %8, %9
  br i1 %ltcompare2, label %loop3, label %after7

loop3:                                            ; preds = %loop_cond1
  %10 = load i32, i32* %i
  %11 = add i32 0, %10
  %A_Index4 = getelementptr [1000000 x i32], [1000000 x i32]* @A, i32 0, i32 %11
  %12 = load i32, i32* %A_Index4
  call void @printint(i32 %12)
  call void @printchar(i8 32)
  br label %end_assn5

end_assn5:                                        ; preds = %loop3
  %13 = load i32, i32* %i
  %add6 = add i32 %13, 1
  store i32 %add6, i32* %i
  br label %loop_cond1

after7:                                           ; preds = %loop_cond1
  call void @printchar(i8 10)
  br label %return

return:                                           ; preds = %after7
  ret i32 0
}

declare i32 @readint()

declare void @printint(i32)

declare void @printchar(i8)
