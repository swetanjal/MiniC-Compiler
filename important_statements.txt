    std::vector<Type*> Doubles(0,
                             Type::getDoubleTy(Context));
  
    FunctionType *FT = FunctionType::get(Type::getVoidTy(Context), Doubles, false);
    Function *F = Function::Create(FT, Function::ExternalLinkage, "main", TheModule);
    BasicBlock *BB = BasicBlock::Create(Context, "entry", F);
    Builder.SetInsertPoint(BB);
    AllocaInst *allocaMem = allocateMemory(F, "a", "int");
    NamedValues["a"] = allocaMem;
    Builder.CreateStore(ConstantInt::get(Context, APInt(32, 1)) ,allocaMem);
    Builder.CreateRetVoid();
    
    verifyFunction(*F);

    ConstantInt::get(Context, APInt(32, 1));;

    Function *TheFunction = Builder.GetInsertBlock()->getParent();
    BasicBlock *ifBlock = BasicBlock::Create(Context, "if", TheFunction);
    Builder.CreateCondBr(CondV, ifBlock, elseBlock);

    Builder.SetInsertPoint(ifBlock);
    Value *ThenV = if_block->Codegen();
    Builder.CreateBr(MergeBB);

    TheFunction->getBasicBlockList().push_back(elseBlock);
    Builder.SetInsertPoint(elseBlock);